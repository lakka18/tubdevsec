name: CI/CD for PHP App

on:
  push:
    branches: [ "main" ]

# Izin yang dibutuhkan untuk berbagai Actions
permissions:
  contents: read
  issues: write
  security-events: write
  actions: read
  pull-requests: write

jobs:
  # Job 1: Menjalankan unit tests
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'

      - name: Install Dependencies
        run: composer install --no-interaction --no-progress

      - name: Grant Execute Permissions for PHPUnit
        run: chmod +x vendor/bin/phpunit

      - name: Run PHPUnit Tests
        # Perintah ini akan gagal jika tidak ada folder 'tests'. Buat setidaknya satu file test.
        run: vendor/bin/phpunit tests || echo "No tests found."

  # Job 2: Menjalankan Static Application Security Testing (SAST)
  sast:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer

      - name: Install Dependencies
        run: composer install --no-interaction --no-progress

      - name: Grant Execute Permissions for PHPStan
        run: chmod +x vendor/bin/phpstan

      - name: Run PHPStan Analysis (SAST)
        run: vendor/bin/phpstan analyse -c phpstan.neon --level=4 --error-format=json > phpstan-report.json || true

      - name: Security Scan Dependencies with Composer Audit (SAST)
        run: composer audit --format=json > composer-audit-report.json || true

      - name: Upload SAST Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sast-reports
          path: |
            phpstan-report.json
            composer-audit-report.json
        if: success() || failure()

  # Job 3: Menjalankan Dynamic Application Security Testing (DAST)
  dast:
    needs: sast
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start App with Docker Compose
        run: docker compose up -d

      - name: Wait for App to Be Ready
        run: |
          echo "Waiting for app to become available..."
          sleep 20 # Beri waktu ekstra agar web server dan db benar-benar siap
          curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:8081

      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'http://localhost:8081'
          fail_action: false
          
      - name: Stop Docker Compose
        run: docker compose down
        if: always()

  # Job 4: Deploy ke Server Staging
  deploy:
    needs: sast
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy files to staging server via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: 22
          source: "./*" # Menyalin semua file dan folder
          target: "~/app-staging" # Direktori tujuan di server staging

      - name: Deploy application on staging server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            # Masuk ke direktori aplikasi di server staging
            cd ~/app-staging
            
            echo "Starting deployment on server..."
            
            # Hentikan dan hapus kontainer lama untuk memastikan pembaruan bersih
            docker compose down -v
            
            # Bangun ulang image dan jalankan aplikasi di background
            docker compose up --build -d
            
            echo "âœ… Deployment to staging completed successfully"
            echo "ðŸ”— Staging URL: http://${{ secrets.STAGING_HOST }}:8081"
