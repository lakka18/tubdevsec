name: CI/CD for PHP App

on:
  push:
    branches: [ "main" ]

jobs:
  # Job 1: Run unit tests
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'

      - name: Install Dependencies
        run: composer install --no-interaction --no-progress

      - name: Grant Execute Permissions for PHPUnit
        run: chmod +x vendor/bin/phpunit

      - name: Run PHPUnit Tests
        run: vendor/bin/phpunit tests

  # Job 2: Run Static Application Security Testing (SAST) and generate reports
  sast:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer

      - name: Install Dependencies
        run: composer install --no-interaction --no-progress

      - name: Grant Execute Permissions for PHPStan
        run: chmod +x vendor/bin/phpstan

      - name: Run PHPStan Analysis (SAST)
        # Output report to a file; continue on error to allow artifact upload
        run: vendor/bin/phpstan analyse -c phpstan.neon --level=4 --error-format=json > phpstan-report.json || true

      - name: Security Scan Dependencies with Composer Audit (SAST)
        # Output report to a file; continue on error
        run: composer audit --format=json > composer-audit-report.json || true

      - name: Upload SAST Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sast-reports
          path: |
            phpstan-report.json
            composer-audit-report.json
        # Optional: Only upload if the files exist
        if: success() || failure()

  # Job 3: Run Dynamic Application Security Testing (DAST)
  dast:
    needs: sast
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start App with Docker Compose
        run: docker compose up -d

      - name: Wait for App to Be Ready
        run: sleep 10

      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: 'http://localhost:8080'  # Port dari Docker Compose
          fail_action: true
          artifact_name: 'zap_dast_report'
        env:
          COMPOSER_NO_INTERACTION: 1


  # Job 4: Deploy to Staging (if all previous jobs succeed)
  deploy:
    needs: dast
    runs-on: ubuntu-latest
    steps:
      - name: Simulated Deploy to Staging
        run: echo "DAST passed! Deploying to staging environment..."
      # Add your actual deployment script here
      # (e.g., using scp, rsync, or a cloud provider's CLI)
