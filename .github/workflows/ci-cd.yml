name: CI/CD for PHP App

on:
  push:
    branches: [ "main" ]

jobs:
  # Job 1: Run unit tests
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'

      - name: Install Dependencies
        run: composer install --no-interaction --no-progress

      - name: Grant Execute Permissions for PHPUnit
        run: chmod +x vendor/bin/phpunit

      - name: Run PHPUnit Tests
        run: vendor/bin/phpunit tests

  # Job 2: Run Static Application Security Testing (SAST) and generate reports
  sast:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer

      - name: Install Dependencies
        run: composer install --no-interaction --no-progress

      - name: Grant Execute Permissions for PHPStan
        run: chmod +x vendor/bin/phpstan

      - name: Run PHPStan Analysis (SAST)
        run: vendor/bin/phpstan analyse -c phpstan.neon --level=4 --error-format=json > phpstan-report.json || true

      - name: Security Scan Dependencies with Composer Audit (SAST)
        run: composer audit --format=json > composer-audit-report.json || true

      - name: Upload SAST Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sast-reports
          path: |
            phpstan-report.json
            composer-audit-report.json
        if: success() || failure()

  # Job 3: Run Dynamic Application Security Testing (DAST)
  dast:
    needs: sast
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start App with Docker Compose
        run: docker compose up -d

      - name: Wait for Database to be Ready
        run: |
          echo "Waiting for MySQL to be ready..."
          timeout 120 bash -c 'until docker compose exec -T db mysqladmin ping -h localhost --silent; do echo "Waiting for MySQL..."; sleep 2; done'
          echo "MySQL is ready!"

      - name: Debug Docker Compose Status
        run: |
          echo "=== Docker Compose Status ==="
          docker compose ps
          echo ""
          echo "=== Docker Images ==="
          docker images
          echo ""
          echo "=== Running Containers ==="
          docker ps -a
          echo ""
          echo "=== Check what's listening on port 8081 ==="
          ss -tlnp | grep 8081 || echo "Nothing listening on port 8081"
          netstat -tlnp | grep 8081 || echo "Nothing listening on port 8081 (netstat)"

      - name: Show Docker Logs
        run: |
          echo "=== Web Container Logs ==="
          docker compose logs web
          echo ""
          echo "=== DB Container Logs ==="
          docker compose logs db
        if: always()

      - name: Wait for App to Be Ready
        run: sleep 15

      - name: Verify App is Running
        run: |
          echo "Checking if app is responding..."
          echo "First, let's check what's actually running:"
          docker compose ps
          echo ""
          echo "Let's try different endpoints:"
          
          # Try localhost:8081 (correct port)
          echo "Trying localhost:8081..."
          curl -v http://localhost:8081 || echo "localhost:8081 failed"
          
          # Try 127.0.0.1:8081
          echo "Trying 127.0.0.1:8081..."
          curl -v http://127.0.0.1:8081 || echo "127.0.0.1:8081 failed"
          
          # Get container IP and try that
          CONTAINER_ID=$(docker compose ps -q web)
          if [ ! -z "$CONTAINER_ID" ]; then
            CONTAINER_IP=$(docker inspect $CONTAINER_ID | grep IPAddress | tail -1 | cut -d'"' -f4)
            if [ ! -z "$CONTAINER_IP" ]; then
              echo "Trying container IP: $CONTAINER_IP:80..."
              curl -v http://$CONTAINER_IP:80 || echo "Container IP failed"
            fi
          fi
          
          # Try to connect to container directly
          echo "Trying to exec into container..."
          docker compose exec -T web curl -v http://localhost || echo "Container internal curl failed"

      - name: Create ZAP workspace directory
        run: |
          mkdir -p ${{ github.workspace }}/zap-reports
          chmod 777 ${{ github.workspace }}/zap-reports

      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'http://localhost:8081'  # Changed to match your docker-compose port
          fail_action: false  # Don't fail the build on security findings initially
          artifact_name: 'zap_dast_report'
          cmd_options: '-a -d -m 2 -T 5'  # Additional options for better scanning
        env:
          COMPOSER_NO_INTERACTION: 1

      - name: Stop Docker Compose
        run: docker compose down
        if: always()

  # Job 4: Deploy to Staging (if all previous jobs succeed)
  deploy:
    needs: dast
    runs-on: ubuntu-latest
    steps:
      - name: Simulated Deploy to Staging
        run: echo "DAST passed! Deploying to staging environment..."
      # Add your actual deployment script here
