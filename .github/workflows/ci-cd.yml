name: CI/CD for PHP App

on:
  push:
    branches: [ "main" ]

jobs:
  # Job 1: Run unit tests
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'

      - name: Install Dependencies
        run: composer install --no-interaction --no-progress

      - name: Grant Execute Permissions for PHPUnit
        run: chmod +x vendor/bin/phpunit

      - name: Run PHPUnit Tests
        run: vendor/bin/phpunit tests

  # Job 2: Run Static Application Security Testing (SAST) and generate reports
  sast:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer

      - name: Install Dependencies
        run: composer install --no-interaction --no-progress

      - name: Grant Execute Permissions for PHPStan
        run: chmod +x vendor/bin/phpstan

      - name: Run PHPStan Analysis (SAST)
        run: vendor/bin/phpstan analyse -c phpstan.neon --level=4 --error-format=json > phpstan-report.json || true

      - name: Security Scan Dependencies with Composer Audit (SAST)
        run: composer audit --format=json > composer-audit-report.json || true

      - name: Upload SAST Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sast-reports
          path: |
            phpstan-report.json
            composer-audit-report.json
        if: success() || failure()

  # Job 3: Run Dynamic Application Security Testing (DAST)
  dast:
    needs: sast
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start App with Docker Compose
        run: docker compose up -d

      - name: Wait for App to Be Ready
        run: sleep 30

      - name: Verify App is Running
        run: |
          echo "Checking if app is responding..."
          timeout 60 bash -c 'until curl -f http://localhost:8080; do echo "Waiting for app..."; sleep 2; done'
          echo "App is ready!"

      - name: Show Docker Logs (for debugging)
        run: docker compose logs
        if: failure()

      - name: Create ZAP workspace directory
        run: |
          mkdir -p ${{ github.workspace }}/zap-reports
          chmod 777 ${{ github.workspace }}/zap-reports

      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'http://localhost:8080'
          fail_action: false  # Don't fail the build on security findings initially
          artifact_name: 'zap_dast_report'
          cmd_options: '-a -d -m 2 -T 5'  # Additional options for better scanning
        env:
          COMPOSER_NO_INTERACTION: 1

      - name: Stop Docker Compose
        run: docker compose down
        if: always()

  # Job 4: Deploy to Staging (if all previous jobs succeed)
  deploy:
    needs: dast
    runs-on: ubuntu-latest
    steps:
      - name: Simulated Deploy to Staging
        run: echo "DAST passed! Deploying to staging environment..."
      # Add your actual deployment script here
